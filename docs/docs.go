// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/login": {
            "post": {
                "description": "Authenticate a user and return a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "Credentials",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/notifications": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List user notifications",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "List notifications",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.NotificationResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create and enqueue a notification. Supports multiple channels: email, sms, and push.\n\n**Email Channel** - See channels.ValidEmailMeta for required meta fields\n**SMS Channel** - See channels.ValidSMSMeta for required meta fields\n**Push Channel** - See channels.ValidPushMeta for required meta fields\n\n**scheduled_at**: Optional. Use RFC3339 format (e.g., \"2025-10-27T10:00:00Z\"). If not provided, the notification will be sent immediately.\n\n**Example:** {\"title\":\"Welcome\",\"content\":\"Welcome message\",\"channel_name\":\"email\",\"meta\":{\"to\":\"user@example.com\",\"subject\":\"Welcome!\"},\"scheduled_at\":\"2025-10-27T10:00:00Z\"}",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Create notification",
                "parameters": [
                    {
                        "description": "Notification data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateNotificationRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/notifications/channels/schemas": {
            "get": {
                "description": "Get the required meta field schemas for each notification channel",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Get channel schemas",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.ChannelSchemasResponse"
                        }
                    }
                }
            }
        },
        "/notifications/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a notification by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Get notification",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Notification ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.NotificationResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Mark a notification as deleted",
                "tags": [
                    "notifications"
                ],
                "summary": "Delete notification",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Notification ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update allowed fields of a notification (title, content, meta, scheduled_at). Only PENDING notifications can be reprogrammed.\n\n**scheduled_at**: Optional. Use RFC3339 format (e.g., \"2025-10-27T15:00:00Z\") to reschedule PENDING notifications.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "notifications"
                ],
                "summary": "Update notification",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Notification ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Partial update",
                        "name": "patch",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/notifier.UpdateNotificationRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/signup": {
            "post": {
                "description": "Register a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Create user",
                "parameters": [
                    {
                        "description": "Registration data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.SignupRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "channels.ValidEmailMeta": {
            "type": "object",
            "properties": {
                "subject": {
                    "type": "string",
                    "example": "Welcome to our platform"
                },
                "template": {
                    "type": "string",
                    "example": "titled"
                },
                "to": {
                    "type": "string",
                    "example": "user@example.com"
                }
            }
        },
        "channels.ValidPushMeta": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "platform": {
                    "type": "string",
                    "example": "android"
                },
                "token": {
                    "type": "string",
                    "example": "device_token_xyz123"
                }
            }
        },
        "channels.ValidSMSMeta": {
            "type": "object",
            "properties": {
                "phone": {
                    "type": "string",
                    "example": "+1234567890"
                },
                "send_date": {
                    "type": "string",
                    "example": "2024-10-21"
                }
            }
        },
        "models.ChannelSchemasResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "$ref": "#/definitions/channels.ValidEmailMeta"
                },
                "push": {
                    "$ref": "#/definitions/channels.ValidPushMeta"
                },
                "sms": {
                    "$ref": "#/definitions/channels.ValidSMSMeta"
                }
            }
        },
        "models.CreateNotificationRequest": {
            "type": "object",
            "properties": {
                "channel_name": {
                    "type": "string",
                    "enum": [
                        "email",
                        "sms",
                        "push"
                    ],
                    "example": "email"
                },
                "content": {
                    "type": "string",
                    "example": "Welcome to our platform!"
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "scheduled_at": {
                    "type": "string",
                    "example": "2025-10-27T10:00:00Z"
                },
                "title": {
                    "type": "string",
                    "example": "Welcome email"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request"
                }
            }
        },
        "models.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Operation completed successfully"
                }
            }
        },
        "models.NotificationResponse": {
            "type": "object",
            "properties": {
                "channel_name": {
                    "type": "string",
                    "example": "email"
                },
                "content": {
                    "type": "string",
                    "example": "Welcome to our platform!"
                },
                "created_at": {
                    "type": "string",
                    "example": "2025-10-26T12:00:00Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "idempotency_key": {
                    "type": "string",
                    "example": "a1b2c3d4e5f6"
                },
                "title": {
                    "type": "string",
                    "example": "Welcome email"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2025-10-26T12:00:00Z"
                },
                "user_id": {
                    "type": "integer",
                    "example": 123
                }
            }
        },
        "models.TokenResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "notifier.UpdateNotificationRequest": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "scheduled_at": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "user.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "user.SignupRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Notification API",
	Description:      "API for managing notifications.\n\n**Channel Meta Requirements:**\n- Email: channels.ValidEmailMeta\n- SMS: channels.ValidSMSMeta\n- Push: channels.ValidPushMeta",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
